// Variables, functions, and mixins

// Some compass features may still be required for Foundation 5 (TODO: remove this dependency when Foundation has been stripped out).
@forward "_partials/compass" as compass-*;
@use "_partials/compass" as compass;

// @import "_partials/spacing";

// Font Awesome settings
@forward "../../node_modules/font-awesome/scss/variables" with (
  $fa-font-size-base: compass.$base-font-size,
  $fa-css-prefix: icon
);

// UQ icons settings
@forward "../fonts/uq-icons/scss/variables" with (
  $uq-css-prefix: icon,
  $uq-font-size-base: compass.$base-font-size
);

// Foundation global variables & type
@use 'foundation-global' as *;

// Foundation mixins & functions

// Source: foundation-sites/scss/foundation/components/_grid.scss
@function grid-calc($colNumber, $totalColumns) {
  $result: percentage(($colNumber / $totalColumns));
  @if $result == 0% { $result: 0; }
  @return $result;
}

@mixin grid-row($behavior: false) {

  // use @include grid-row(nest); to include a nested row
  @if $behavior == nest {
    margin: 0 (-($column-gutter/2));
    max-width: none;
    width: auto;
  }

  // use @include grid-row(collapse); to collapsed a container row margins
  @else if $behavior == collapse {
    margin: 0;
    max-width: $row-width;
    width: 100%;
  }

  // use @include grid-row(nest-collapse); to collapse outer margins on a nested row
  @else if $behavior == nest-collapse {
    margin: 0;
    max-width: none;
    width: auto;
  }

  // use @include grid-row; to use a container row
  @else {
    margin: 0 auto;
    max-width: $row-width;
    width: 100%;
  }

  // Clearfix for all rows
  @include clearfix();
}

@mixin grid-column(
  $columns:false,
  $last-column:false,
  $center:false,
  $offset:false,
  $push:false,
  $pull:false,
  $collapse:false,
  $float:true,
  $position:false) {

  // If positioned for default .column, include relative position
  // push and pull require position set
  @if $position or $push or $pull {
    position: relative;
  }

  // If collapsed, get rid of gutter padding
  @if $collapse {
    padding-left: 0;
    padding-right: 0;
  }

  // Gutter padding whenever a column isn't set to collapse
  // (use $collapse:null to do nothing)
  @else if $collapse == false {
    padding-left: ($column-gutter / 2);
    padding-right: ($column-gutter / 2);
  }

  // If a column number is given, calculate width
  @if $columns {
    width: grid-calc($columns, $total-columns);

    // If last column, float naturally instead of to the right
    @if $last-column { float: $opposite-direction; }
  }

  // Source Ordering, adds left/right depending on which you use.
  @if $push { #{$default-float}: grid-calc($push, $total-columns); #{$opposite-direction}: auto; }
  @if $pull { #{$opposite-direction}: grid-calc($pull, $total-columns); #{$default-float}: auto; }

  @if $float and $last-column == false {
    @if $float == left or $float == true { float: $default-float; }
    @else if $float == right { float: $opposite-direction; }
    @else { float: none; }
  }

  // If centered, get rid of float and add appropriate margins
  @if $center {
    margin-#{$default-float}: auto;
    margin-#{$opposite-direction}: auto;
    float: none;
  }

  // If offset, calculate appropriate margins
  @if $offset { margin-#{$default-float}: grid-calc($offset, $total-columns) !important; }

}

// Source: foundation-sites/scss/foundation/components/_block-grid.scss
@mixin block-grid(
  $per-row:false,
  $spacing:$block-grid-default-spacing,
  $include-spacing:true,
  $base-style:true) {

  @if $base-style {
    display: block;
    padding: 0;
    @if $align-block-grid-to-grid {
      margin: 0;
    } @else {
      margin: 0 (-$spacing/2);
    }
    @include clearfix;

    > li {
      display: block;
      float: $default-float;
      height: auto;
      @if $include-spacing {
        padding: 0 ($spacing/2) $spacing;
      }
    }
  }

  @if $per-row {
    > li {
      list-style: none;
      @if $include-spacing {
        padding: 0 ($spacing/2) $spacing;
      }
      width: 100%/$per-row;

      &:nth-of-type(1n) { clear: none; }
      &:nth-of-type(#{$per-row}n+1) { clear: both; }
      @if $align-block-grid-to-grid {
        @include block-grid-aligned($per-row, $spacing);
      }
    }
  }
}

@mixin block-grid-aligned($per-row, $spacing) {
  @for $i from 1 through $block-grid-elements {
    @if $per-row >= $i {
      $grid-column: '+' + $i;
      @if $per-row == $i {
        $grid-column: '';
      }
      &:nth-of-type(#{$per-row}n#{unquote($grid-column)}) {
        padding-left: ($spacing - (($spacing / $per-row) * ($per-row - ($i - 1))));
        padding-right: ($spacing - (($spacing / $per-row) * $i));
      }
    }
  }
}

// Source: foundation-sites/scss/foundation/components/_type.scss
// Text alignment class names
$align-class-names:
  small-only,
  small,
  medium-only,
  medium,
  large-only,
  large,
  xlarge-only,
  xlarge,
  xxlarge-only,
  xxlarge;

// Text alignment breakpoints
$align-class-breakpoints:
  $small-only,
  $small-up,
  $medium-only,
  $medium-up,
  $large-only,
  $large-up,
  $xlarge-only,
  $xlarge-up,
  $xxlarge-only,
  $xxlarge-up;

// Generates text align and justify classes
@mixin align-classes{
  .text-left    { text-align: left !important; }
  .text-right   { text-align: right !important; }
  .text-center  { text-align: center !important; }
  .text-justify { text-align: justify !important; }

  @for $i from 1 through length($align-class-names) {
    @media #{(nth($align-class-breakpoints, $i))} {
      .#{(nth($align-class-names, $i))}-text-left { text-align: left !important; }
      .#{(nth($align-class-names, $i))}-text-right   { text-align: right !important; }
      .#{(nth($align-class-names, $i))}-text-center  { text-align: center !important; }
      .#{(nth($align-class-names, $i))}-text-justify { text-align: justify !important; }
    }
  }
}

// Source: foundation-sites/scss/foundation/components/_inline-list.scss
//
// @variables
//
$include-html-inline-list-classes: $include-html-classes !default;

// We use this to control the margins and padding of the inline list.
$inline-list-top-margin: 0 !default;
$inline-list-opposite-margin: 0 !default;
$inline-list-bottom-margin: rem-calc(17) !default;
$inline-list-default-float-margin: rem-calc(-22) !default;
$inline-list-default-float-list-margin: rem-calc(22) !default;

$inline-list-padding: 0 !default;

// We use this to control the overflow of the inline list.
$inline-list-overflow: hidden !default;

// We use this to control the list items
$inline-list-display: block !default;

// We use this to control any elements within list items
$inline-list-children-display: block !default;

//
// @mixins
//
// We use this mixin to create inline lists
@mixin inline-list {
  list-style: none;
  margin-top: $inline-list-top-margin;
  margin-bottom: $inline-list-bottom-margin;
  margin-#{$default-float}: $inline-list-default-float-margin;
  margin-#{$opposite-direction}: $inline-list-opposite-margin;
  overflow: $inline-list-overflow;
  padding: $inline-list-padding;

  > li {
    display: $inline-list-display;
    float: $default-float;
    list-style: none;
    margin-#{$default-float}: $inline-list-default-float-list-margin;
    > * { display: $inline-list-children-display; }
  }
}

// Mystery variables
$gutter: 20px;
$half-gutter: 10px;
$select-bg-color: #fff;

// Only base colours should be listed in this file. Mixed and modified colour should be done at the associated component or supporting file. 
// UQ brand colours
// UQ Primary palette
$uq-purple: #51247A;
$uq-black: #000000;
$uq-white: #ffffff;
// UQ Secondary palette
$uq-purple-light: #962A8B;
$uq-neutral1: #D7D1CC;
$uq-neutral2: #999490;
$uq-gold: #BDA14E;
$uq-red: #E62645;
$uq-orange: #EB602B;
$uq-yellow: #FBB800;
$uq-blue: #4085C6;
$uq-aqua: #00ABCD;
$uq-green: #2EA836;
// UQ Purple gradient
$uq-purple-gradient: linear-gradient(90deg, rgba(81, 36, 122, 1) 0%, 87%, rgba(150, 42, 139, 1) 100%);
// Link Blue
$link: #2377cb;
$link-hover: #005ea5;
// Links
$link-color: #2377cb;
$link-active-color: #005ea5;
$link-hover-color: #005ea5;
// External link icon
$external-link-icon-color: #bbb;
// Alerts
$alert: #B80017;
// UQ brand colours
$uq-dark-purple: #51247A;
// $uq-green: #8cb800; Deprecated because of duplicate naming.
// Vertical lists
$vertical-list-border: #EDEDED;
// Vertical Menu
$vertical-menu-link-border: #f5f5f5;
$vertical-menu-link-active: #000;
$vertical-menu-shaded-bg-color: #f6f6f6;
// Administration
$primary-tabs-bg: #eee;
// Messages
$messages-status-bg: #eef5fb;
$messages-status-border-color: #8ebae7;
$messages-status-color: #000;
$messages-warning-bg: #fff9ee;
$messages-warning-border-color: #ffd179;
$messages-warning-color: #000;
$messages-error-bg: #d8481f;
$messages-error-border-color: #d8481f;
$messages-error-color: #fff;
$messages-error-link-color: #fff;
// Progress Bar
$progress-bar-bg: #ddd;
$progress-bar-fill-bg: #444;
$progress-bar-border-color: #949494;
$progress-bar-color: #fff;
// Progression
$progression-text: #fff;
$progression-border: $progression-text;
$progression-label: #222;
$progression-step-bg: #999490;
$progression-bar-bg: #D7D1CC;
$progression-completed: #2EA836;
// Sections
$section-shaded-bg: #f5f5f5;
$section-summary-color: #767676;
$section-footer-color: #767676;
// Palettes
$light-palette-color: #f0f0f0;
$light-palette-border-color: rgba(255, 255, 255, .4);
$light-palette-link-color: #fff;
$light-palette-bg: #fff;
$dark-palette-color: #222;
$dark-palette-border-color: rgba(0, 0, 0, .1);
$dark-palette-link-color: lighten($uq-purple, 10%);
$dark-palette-bg: #333;
// Tints
$dark-tint-bg: #494949;
// Hero banner
$hero-banner-bg: #494949;
// Menu Block two column
$menu-block-two-column-link-color: $link-color;
$menu-block-two-column-inactive-link-color: #222;
$menu-block-two-column-border-color: #eee;
// Page
$page-header-bg: #f2f2f2;
$page-header-white-bg: #fff;
$page-header-white-border-color: #eee;
// Tabs
$tabs-shaded-bg: #f5f5f5;
$tabs-underlined-border-color: #e3dbe8;
// Article
$article-title-color: #555;
$article-border-color: #eee;
$article-tag-bg: #f3f3f3;
$article-tag-color: #666;
// Icons
$icon-light-grey-color: #ddd;
// Catalogue
$catalogue-index-bg: #f5f5f5;
$catalogue-index-color: #555;
$catalogue-meta-color: #eee;
// Citation (eSpace)
$citation-color: #868686;
// Tags
$tags-link-bg: #f5f5f5;
// Action items
$action-item-bg: #f5f5f5;
$action-item-icon-bg: #dbdbdb;
// Team
$team-teaser-action-links: #666;
// Asset
$asset-border-color: #ccc;
// Cards
$card-shaded-bg: #f5f5f5;
// Overview brand device connector
$brand-device-connector: #E1E1E1;
// Compendium
$compendium-border-color: #ccc;
$compendium-title-border-color: #ddd;
// Logo
$logo-color: #fff;
// Content column block
$content-column-block-pane-bg: #2468c6;
$content-column-block-pane-odd-bg: #22487e;
// Divider
$divider-border-color: #ededed;
// Compact
$compact-content-color: #767676;

//
// Mixins
//
@mixin hide-text {
    // http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
    text-indent: 100%;
    white-space: nowrap;
    overflow: hidden;
}

// Background images used for full-width cover.
@mixin background-cover($image-path: false, $background-top: center, $background-left: center) {
    // https://css-tricks.com/perfect-full-page-background-image
    @if ($image-path) {
        background-image: url($image-path);
    }
    background-position: $background-top $background-left;
    background-repeat: no-repeat;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}

// Box shadow
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    }
    @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

// Auto-detect external links based on path and add external icon.
@mixin external-auto-detect {
    &[href^="http://"],
    &[href^="https://"],
    &[rel^="external"] {
        @extend %external;
    }
}

//
// Tints
// Provide an overlay over backgrounds to darken, lighten an image to provide better visual contrast for content.
// Can be used as extensions on components that accommodate overlaid content.
//

%tint {
  position: relative;
  overflow: hidden;
}

%tint-overlay {
  content: "";
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  opacity: 0.5;
}

%tint-content {
  position: relative;
  z-index: 2;
}

// Light tint layer provides a white tint
%light-tint,
.light-tint {
  @extend %tint;
  &:before {
    @extend %tint-overlay;
    background: #fff;
  }
}

// Dark tint layer provides a black tint
%dark-tint,
.dark-tint {
  @extend %tint;
  background-color: $dark-tint-bg;
  &:before {
    @extend %tint-overlay;
    background: #000;
  }
}


// Palettes are colour groups to change all the colours within that wrapper to a specific set.
//
// Components that set their own element colours may need palette @extend added to them to override specificity. e.g.
// &.light-palette {
//   a {
//     @extend %light-palette;
//   }
// }
//

// Light
%light-palette {
  border-color: $light-palette-border-color;
  color: $light-palette-color;

  a {
    color: $light-palette-link-color;
    font-weight: 400;

    &:hover {
      color: darken($light-palette-link-color,10%);
    }
  }
}

%light-palette-bg {
  background-color: $light-palette-bg;
}

// Dark
%dark-palette {
  border-color: $dark-palette-border-color;
  color: $dark-palette-color;

  a {
    color: $dark-palette-link-color;

    &:hover {
      color: darken($dark-palette-link-color,10%);
    }
  }
}

%dark-palette-bg {
  background-color: $dark-palette-bg;
}
